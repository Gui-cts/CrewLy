package view;

import connection.Database;
import controller.Sistema;
import dao.EquipeDAO;
import dao.TarefaDAO;
import java.awt.Color;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import model.Equipe;
import model.Tarefa;
import model.Usuario;
import view.DialogDetalhesTarefa;

public class TelaEquipeLider extends javax.swing.JFrame {

    private Sistema sistema;
    private Usuario usuario;
    private List<Tarefa> tarefasDaEquipe;
    private List<Equipe> equipesDoUsuario;
    private TarefaDAO tarefaDAO;

    /**
     * Creates new form TelaEquipeLider
     */
    public TelaEquipeLider(Usuario usuario) {
        this.usuario = usuario;
        initComponents();
        sistema = new Sistema();
        tarefaDAO = new TarefaDAO();
        btnCriarTarefa.setVisible(false);
        btnDeletarEquipe.setVisible(false);
        btnAdicionarMembro.setVisible(false);
        carregarEquipesUsuario();
        carregarEquipesLider();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listEquipesUsuario = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listTarefasEquipe = new javax.swing.JList<>();
        btnCriarEquipe = new javax.swing.JButton();
        btnDeletarEquipe = new javax.swing.JButton();
        btnCriarTarefa = new javax.swing.JButton();
        btnAdicionarMembro = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        listEquipesUsuario.setBackground(new Color(0,0,0,0));
        listEquipesUsuario.setBorder(null);
        listEquipesUsuario.setFont(new java.awt.Font("Oswald Medium", 0, 22)); // NOI18N
        listEquipesUsuario.setOpaque(false);
        listEquipesUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listEquipesUsuarioMouseClicked(evt);
            }
        });
        listEquipesUsuario.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listEquipesUsuarioValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listEquipesUsuario);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 200, 920));

        listTarefasEquipe.setBackground(new Color(0,0,0,0));
        listTarefasEquipe.setBorder(null);
        listTarefasEquipe.setFont(new java.awt.Font("Oswald Medium", 0, 22)); // NOI18N
        listTarefasEquipe.setOpaque(false);
        listTarefasEquipe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listTarefasEquipeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listTarefasEquipe);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 240, 1120, 600));

        btnCriarEquipe.setBorder(null);
        btnCriarEquipe.setContentAreaFilled(false);
        btnCriarEquipe.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCriarEquipe.setOpaque(false);
        btnCriarEquipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarEquipeActionPerformed(evt);
            }
        });
        getContentPane().add(btnCriarEquipe, new org.netbeans.lib.awtextra.AbsoluteConstraints(1250, 30, 180, 50));

        btnDeletarEquipe.setFont(new java.awt.Font("Oswald Medium", 0, 22)); // NOI18N
        btnDeletarEquipe.setForeground(new java.awt.Color(0, 0, 0));
        btnDeletarEquipe.setText("Deletar Equipe");
        btnDeletarEquipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarEquipeActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeletarEquipe, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 150, 180, 50));

        btnCriarTarefa.setFont(new java.awt.Font("Oswald Medium", 0, 22)); // NOI18N
        btnCriarTarefa.setForeground(new java.awt.Color(0, 0, 0));
        btnCriarTarefa.setText("Criar Tarefa");
        btnCriarTarefa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarTarefaActionPerformed(evt);
            }
        });
        getContentPane().add(btnCriarTarefa, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 150, 240, 50));

        btnAdicionarMembro.setFont(new java.awt.Font("Oswald Medium", 0, 22)); // NOI18N
        btnAdicionarMembro.setForeground(new java.awt.Color(0, 0, 0));
        btnAdicionarMembro.setText("Adicionar Membro");
        btnAdicionarMembro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarMembroActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdicionarMembro, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 150, 250, 50));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/design/tela_equipe_lider.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 1030));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listEquipesUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listEquipesUsuarioMouseClicked
        // TODO add your handling code here:
        String nomeEquipe = listEquipesUsuario.getSelectedValue();
        if (nomeEquipe != null) {
            try {
                int idEquipe = buscarIdEquipePorNome(nomeEquipe);
                carregarTarefasEquipe(idEquipe);
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao carregar tarefas.");
            }
        }
    }//GEN-LAST:event_listEquipesUsuarioMouseClicked

    private void listTarefasEquipeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTarefasEquipeMouseClicked
        // TODO add your handling code here:
        String tituloTarefa = listTarefasEquipe.getSelectedValue();
        if (tituloTarefa != null) {
            try {
                Tarefa tarefa = buscarTarefaPorTitulo(tituloTarefa);
                new DialogDetalhesTarefa(this, true, tarefa).setVisible(true);
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao carregar detalhes da tarefa.");
            }
        }
    }//GEN-LAST:event_listTarefasEquipeMouseClicked

    private void btnCriarEquipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarEquipeActionPerformed
        // TODO add your handling code here:
        new DialogCriarEquipe(this, usuario.getIdUsuario()).setVisible(true);
        // Opcional: ap√≥s fechar, recarregar lista de equipes
        carregarEquipesLider();
    }//GEN-LAST:event_btnCriarEquipeActionPerformed

    private void listEquipesUsuarioValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listEquipesUsuarioValueChanged
        // TODO add your handling code here:
        if (!evt.getValueIsAdjusting()) {
            if (listEquipesUsuario.getSelectedIndex() != -1) {
                btnCriarTarefa.setVisible(true);
                btnDeletarEquipe.setVisible(true);
                btnAdicionarMembro.setVisible(true);
            } else {
                btnCriarTarefa.setVisible(false);
                btnDeletarEquipe.setVisible(false);
                btnAdicionarMembro.setVisible(false);
            }
        }

    }//GEN-LAST:event_listEquipesUsuarioValueChanged

    private void btnCriarTarefaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarTarefaActionPerformed
        // TODO add your handling code here:
        String equipeSelecionada = listEquipesUsuario.getSelectedValue();
        if (equipeSelecionada != null) {
            try {
                int idEquipeSelecionada = buscarIdEquipePorNome(equipeSelecionada);

                new DialogCriarTarefa(this, idEquipeSelecionada, new DialogCriarTarefa.OnTarefaCriadaListener() {
                    @Override
                    public void onTarefaCriada(Tarefa novaTarefa) {
                        salvarTarefaNoBanco(novaTarefa);
                        try {
                            carregarTarefasEquipe(idEquipeSelecionada);
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaEquipeLider.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }).setVisible(true);

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao buscar ID da equipe.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma equipe.");
        }
    }//GEN-LAST:event_btnCriarTarefaActionPerformed

    private void btnDeletarEquipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarEquipeActionPerformed
        // TODO add your handling code here:
        String equipeSelecionada = listEquipesUsuario.getSelectedValue();

        if (equipeSelecionada != null) {
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Tem certeza que deseja deletar a equipe \"" + equipeSelecionada + "\"?",
                    "Confirma√ß√£o", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    int idEquipe = buscarIdEquipePorNome(equipeSelecionada);
                    EquipeDAO equipeDAO = new EquipeDAO();
                    equipeDAO.deletarEquipe(idEquipe);

                    JOptionPane.showMessageDialog(this, "Equipe deletada com sucesso!");

                    carregarEquipesLider();  // ou carregarEquipesUsuario(), conforme sua l√≥gica
                    listTarefasEquipe.setModel(new DefaultListModel<>());  // limpa as tarefas

                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Erro ao deletar equipe: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma equipe para deletar.");
        }
    }//GEN-LAST:event_btnDeletarEquipeActionPerformed

    private void btnAdicionarMembroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarMembroActionPerformed
        // TODO add your handling code here:
        String equipeSelecionada = listEquipesUsuario.getSelectedValue();
        if (equipeSelecionada != null) {
            try {
                int idEquipe = buscarIdEquipePorNome(equipeSelecionada);
                new DialogAdicionarMembro(this, idEquipe).setVisible(true);
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao obter ID da equipe.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma equipe.");
        }
    }//GEN-LAST:event_btnAdicionarMembroActionPerformed

    private void salvarTarefaNoBanco(Tarefa tarefa) {
        String sql = "INSERT INTO tarefas (titulo, descricao, data_limite, concluida, id_equipe) VALUES (?, ?, ?, ?, ?)";

        try (Connection conn = Database.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, tarefa.getTitulo());
            stmt.setString(2, tarefa.getDescricao());
            stmt.setDate(3, Date.valueOf(tarefa.getDataLimite()));  // LocalDate -> java.sql.Date
            stmt.setBoolean(4, tarefa.isConcluida());
            stmt.setInt(5, tarefa.getIdEquipe());

            stmt.executeUpdate();

            JOptionPane.showMessageDialog(this, "Tarefa criada com sucesso!");

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao criar tarefa: " + e.getMessage());
        }
    }

    private int buscarIdEquipePorNome(String nomeEquipe) throws SQLException {
        for (Equipe e : equipesDoUsuario) {  // Lista que voc√™ j√° carrega as equipes do usu√°rio.
            if (e.getNome().equals(nomeEquipe)) {
                return e.getIdEquipe();
            }
        }
        throw new SQLException("Equipe n√£o encontrada.");
    }

    private void carregarEquipesLider() {
        try {
            EquipeDAO equipeDAO = new EquipeDAO();
            List<Equipe> equipes = equipeDAO.listarEquipesPorLider(usuario.getIdUsuario());

            // ATUALIZAR tamb√©m a lista interna
            this.equipesDoUsuario = equipes;

            DefaultListModel<String> model = new DefaultListModel<>();
            for (Equipe equipe : equipes) {
                model.addElement(equipe.getNome());
            }
            listEquipesUsuario.setModel(model);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar equipes: " + e.getMessage());
        }
    }

    private void carregarTarefasEquipe(int idEquipe) throws SQLException {
        List<Tarefa> tarefas = tarefaDAO.listarTarefasPorEquipe(idEquipe);  // M√©todo no DAO
        DefaultListModel<String> model = new DefaultListModel<>();
        for (Tarefa t : tarefas) {
            model.addElement(t.getTitulo());
        }
        listTarefasEquipe.setModel(model);
        this.tarefasDaEquipe = tarefas;
    }

    public void carregarEquipesUsuario() {
        try {
            EquipeDAO equipeDAO = new EquipeDAO();
            List<Equipe> equipes = equipeDAO.listarEquipesPorMembro(usuario.getIdUsuario());

            this.equipesDoUsuario = equipes;

            DefaultListModel<String> model = new DefaultListModel<>();

            for (Equipe equipe : equipes) {
                model.addElement(equipe.getNome());
            }

            listEquipesUsuario.setModel(model);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar equipes: " + e.getMessage());
        }
    }

    private Tarefa buscarTarefaPorTitulo(String titulo) throws SQLException {
        if (tarefasDaEquipe == null) {
            throw new SQLException("Lista de tarefas n√£o carregada.");
        }
        for (Tarefa t : tarefasDaEquipe) {
            if (t.getTitulo().equals(titulo)) {
                return t;
            }
        }
        throw new SQLException("Tarefa n√£o encontrada.");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionarMembro;
    private javax.swing.JButton btnCriarEquipe;
    private javax.swing.JButton btnCriarTarefa;
    private javax.swing.JButton btnDeletarEquipe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listEquipesUsuario;
    private javax.swing.JList<String> listTarefasEquipe;
    // End of variables declaration//GEN-END:variables
}
