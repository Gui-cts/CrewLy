package view;

import utils.ImagemUtil;

import controller.Sistema;
import dao.EquipeDAO;
import java.awt.Color;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import model.Equipe;
import model.Usuario;
import java.sql.SQLException;
import model.Tarefa;
import dao.TarefaDAO;

public class TelaEquipeFuncionario extends javax.swing.JFrame {

    private Sistema sistema;
    private Usuario usuario;
    private List<Tarefa> tarefasDaEquipe;
    private List<Equipe> equipesDoUsuario;
    private TarefaDAO tarefaDAO;

    /**
     * Creates new form TelaEquipeFuncionario
     */
    public TelaEquipeFuncionario(Usuario usuario) {
        this.usuario = usuario;
        initComponents();
        sistema = new Sistema();
        setSize(1440, 1024);
        setResizable(false);
        carregarEquipesUsuario();
        tarefaDAO = new TarefaDAO();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listEquipesUsuario = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listTarefasEquipe = new javax.swing.JList<>();
        btnVoltar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jScrollPane1.setOpaque(false);

        listEquipesUsuario.setBackground(new Color(0,0,0,0));
        listEquipesUsuario.setBorder(null);
        listEquipesUsuario.setFont(new java.awt.Font("Oswald Medium", 0, 22)); // NOI18N
        listEquipesUsuario.setOpaque(false);
        listEquipesUsuario.setSelectionBackground(new Color(0,0,0,0));
        listEquipesUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listEquipesUsuarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listEquipesUsuario);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 60, 210, 860);

        jScrollPane2.setBackground(new Color(0,0,0,0));
        jScrollPane2.setBorder(null);
        jScrollPane2.setOpaque(false);

        listTarefasEquipe.setFont(new java.awt.Font("Oswald Medium", 0, 22)); // NOI18N
        listTarefasEquipe.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listTarefasEquipe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listTarefasEquipeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listTarefasEquipe);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(270, 120, 1130, 860);

        btnVoltar.setFont(new java.awt.Font("Oswald Medium", 0, 22)); // NOI18N
        btnVoltar.setForeground(new java.awt.Color(0, 0, 0));
        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });
        getContentPane().add(btnVoltar);
        btnVoltar.setBounds(290, 30, 130, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/design/tela_equipe_funcionario.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-3, -4, 1440, 1020);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listEquipesUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listEquipesUsuarioMouseClicked
        // TODO add your handling code here:
        String nomeEquipe = listEquipesUsuario.getSelectedValue();
        if (nomeEquipe != null) {
            try {
                int idEquipe = buscarIdEquipePorNome(nomeEquipe);
                carregarTarefasEquipe(idEquipe);
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao carregar tarefas.");
            }
        }
    }//GEN-LAST:event_listEquipesUsuarioMouseClicked

    private Tarefa buscarTarefaPorTitulo(String titulo) throws SQLException {
        if (tarefasDaEquipe == null) {
            throw new SQLException("Lista de tarefas não carregada.");
        }
        for (Tarefa t : tarefasDaEquipe) {
            if (t.getTitulo().equals(titulo)) {
                return t;
            }
        }
        throw new SQLException("Tarefa não encontrada.");
    }

    private void listTarefasEquipeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTarefasEquipeMouseClicked
        // TODO add your handling code here:
        String tituloTarefa = listTarefasEquipe.getSelectedValue();
        if (tituloTarefa != null) {
            try {
                Tarefa tarefa = buscarTarefaPorTitulo(tituloTarefa);
                new DialogDetalhesTarefa(this, true, tarefa, usuario).setVisible(true);
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao carregar detalhes da tarefa.");
            }
        }
    }//GEN-LAST:event_listTarefasEquipeMouseClicked

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        // TODO add your handling code here:
        new MenuFuncionario(usuario).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private int buscarIdEquipePorNome(String nomeEquipe) throws SQLException {
        for (Equipe e : equipesDoUsuario) {  // Lista que você já carrega as equipes do usuário.
            if (e.getNome().equals(nomeEquipe)) {
                return e.getIdEquipe();
            }
        }
        throw new SQLException("Equipe não encontrada.");
    }

    private void carregarTarefasEquipe(int idEquipe) throws SQLException {
        List<Tarefa> tarefas = tarefaDAO.listarTarefasPorEquipe(idEquipe);  // Método no DAO
        DefaultListModel<String> model = new DefaultListModel<>();
        for (Tarefa t : tarefas) {
            model.addElement(t.getTitulo());
        }
        listTarefasEquipe.setModel(model);
        this.tarefasDaEquipe = tarefas;
    }

    private void carregarEquipesUsuario() {
        try {
            EquipeDAO equipeDAO = new EquipeDAO();
            List<Equipe> equipes = equipeDAO.listarEquipesPorMembro(usuario.getIdUsuario());

            this.equipesDoUsuario = equipes;

            DefaultListModel<String> model = new DefaultListModel<>();

            for (Equipe equipe : equipes) {
                model.addElement(equipe.getNome());
            }

            listEquipesUsuario.setModel(model);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar equipes: " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listEquipesUsuario;
    private javax.swing.JList<String> listTarefasEquipe;
    // End of variables declaration//GEN-END:variables
}
