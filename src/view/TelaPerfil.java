/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import connection.Database;
import controller.Sistema;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import model.Usuario;
import org.netbeans.lib.awtextra.AbsoluteLayout;
import utils.HashUtil;
import utils.ImagemUtil;
import utils.TokenUtil;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import model.Competencia;
import utils.EmailSender;

public class TelaPerfil extends javax.swing.JFrame {

    private JPanel painelCompetencias = new JPanel();
    private ArrayList<JCheckBox> checkboxesCompetencias = new ArrayList<>();
    private Sistema sistema;
    private Usuario usuario;

    public TelaPerfil(Usuario usuario) {
        this.usuario = usuario;
        initComponents();
        sistema = new Sistema();

        // Ajusta o painel de rolagem para mostrar o painelConteudo
        jScrollPane1.setViewportView(painelConteudo);

        // Define um tamanho maior para o painel para permitir a rolagem
        painelConteudo.setPreferredSize(new Dimension(1440, 1400)); // ajuste se necessário

        // Preenche os dados do usuário
        txtNome.setText(usuario.getNome());
        txtEmail.setText(usuario.getEmail());

        lblCargo.setText("<html>Cargo: <span style='color:" + (usuario.getIdTipo() == 2 ? "red" : "green") + ";'>["
                + (usuario.getIdTipo() == 2 ? "Lider" : "Funcionario") + "]</span></html>");

        // Carrega o painel de competências
        carregarCompetenciasDoUsuario(this.usuario.getIdUsuario());

        // Cria e posiciona o botão de salvar abaixo das competências
        JButton btnSalvarCompetencias = new JButton("Salvar Competências");
        btnSalvarCompetencias.setFont(new java.awt.Font("Oswald Medium", 0, 16));
        btnSalvarCompetencias.addActionListener(e -> {
            salvarCompetenciasDoUsuario(usuario.getIdUsuario());
            JOptionPane.showMessageDialog(this, "Competências atualizadas com sucesso!");
        });

        // Ajuste a posição do botão para abaixo do painel de competências
        painelConteudo.add(btnSalvarCompetencias, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 1100, 200, 30));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        painelConteudo = new javax.swing.JPanel();
        txtNome = new javax.swing.JLabel();
        txtEmail = new javax.swing.JLabel();
        btnRedefinirSenha = new javax.swing.JButton();
        btnEditarNome = new javax.swing.JButton();
        btnTrocarEmail = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        lblCargo = new javax.swing.JLabel();
        btnExcluirConta = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        painelConteudo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtNome.setBackground(new java.awt.Color(0, 0, 0));
        txtNome.setFont(new java.awt.Font("Oswald Medium", 0, 22)); // NOI18N
        txtNome.setForeground(new java.awt.Color(0, 0, 0));
        txtNome.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        painelConteudo.add(txtNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 240, 570, 40));

        txtEmail.setFont(new java.awt.Font("Oswald Medium", 0, 22)); // NOI18N
        txtEmail.setForeground(new java.awt.Color(0, 0, 0));
        txtEmail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        painelConteudo.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 440, 570, 40));

        btnRedefinirSenha.setBackground(new java.awt.Color(0, 0, 0));
        btnRedefinirSenha.setFont(new java.awt.Font("Oswald Medium", 0, 22)); // NOI18N
        btnRedefinirSenha.setForeground(new java.awt.Color(255, 255, 255));
        btnRedefinirSenha.setText("Redefinir senha");
        btnRedefinirSenha.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRedefinirSenha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRedefinirSenhaActionPerformed(evt);
            }
        });
        painelConteudo.add(btnRedefinirSenha, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 550, 170, 30));

        btnEditarNome.setFont(new java.awt.Font("Oswald Medium", 0, 12)); // NOI18N
        btnEditarNome.setText("Editar");
        btnEditarNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarNomeActionPerformed(evt);
            }
        });
        painelConteudo.add(btnEditarNome, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 250, -1, -1));

        btnTrocarEmail.setFont(new java.awt.Font("Oswald Medium", 0, 12)); // NOI18N
        btnTrocarEmail.setText("Editar");
        btnTrocarEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTrocarEmailActionPerformed(evt);
            }
        });
        painelConteudo.add(btnTrocarEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 450, -1, -1));

        btnVoltar.setBorder(null);
        btnVoltar.setContentAreaFilled(false);
        btnVoltar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVoltar.setOpaque(false);
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });
        painelConteudo.add(btnVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 90, 90));

        lblCargo.setFont(new java.awt.Font("Oswald Medium", 0, 22)); // NOI18N
        painelConteudo.add(lblCargo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 130, 190, 40));

        btnExcluirConta.setBorder(null);
        btnExcluirConta.setContentAreaFilled(false);
        btnExcluirConta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnExcluirConta.setOpaque(false);
        btnExcluirConta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirContaActionPerformed(evt);
            }
        });
        painelConteudo.add(btnExcluirConta, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 900, 380, 60));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/design/TelaPerfil.jpg"))); // NOI18N
        painelConteudo.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1440, -1));

        jScrollPane1.setViewportView(painelConteudo);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRedefinirSenhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRedefinirSenhaActionPerformed
        // TODO add your handling code here:
        String novaSenha = solicitarNovaSenha();
        String email = this.usuario.getEmail();
        if (novaSenha == null) {
            return;
        }
        boolean sucesso = sistema.redefinirSenha(email, novaSenha);
        JOptionPane.showMessageDialog(this, sucesso ? "Senha atualizada com sucesso!" : "Erro ao atualizar a senha.");
    }//GEN-LAST:event_btnRedefinirSenhaActionPerformed

    private void btnEditarNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarNomeActionPerformed
        // TODO add your handling code here:
        String nome = JOptionPane.showInputDialog("Insira o novo nome:");
        if (!nome.matches("^[A-Za-zÀ-ÿ\\s]{3,}$")) {
            JOptionPane.showMessageDialog(null, "Nome inválido. Use apenas letras e pelo menos 3 caracteres.");
            return;
        }
        boolean sucesso = sistema.redefinirNome(nome, usuario);
        if (sucesso) {
            usuario.setNome(nome);
            txtNome.setText(nome);
            JOptionPane.showMessageDialog(this, "Nome atualizado com sucesso!");
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar o nome.");
        }
    }//GEN-LAST:event_btnEditarNomeActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        // TODO add your handling code here:
        if (usuario.getIdTipo() == 1) { // 1 = funcionário
            new MenuFuncionario(usuario).setVisible(true);
        } else if (usuario.getIdTipo() == 2) { // 2 = líder
            new MenuLider(usuario).setVisible(true);
        }
        this.dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnExcluirContaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirContaActionPerformed
        // TODO add your handling code here:
        String senhaDigitada = JOptionPane.showInputDialog(
                this,
                "Digite sua senha para confirmar a exclusão da conta.\nCUIDADO: Esta ação não pode ser desfeita."
        );

        if (senhaDigitada == null) {
            return;
        }

        String hashSenhaDigitada = HashUtil.gerarHash(senhaDigitada);

        System.out.println("Hash digitada: " + hashSenhaDigitada);
        System.out.println("Hash armazenada: " + usuario.getSenhaHash());

        if (hashSenhaDigitada.equals(usuario.getSenhaHash())) {
            boolean sucesso = sistema.excluirUsuarioPorEmail(usuario.getEmail());
            if (sucesso) {
                JOptionPane.showMessageDialog(this, "Conta excluída com sucesso!");
                new TelaLogin().setVisible(true);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao excluir conta.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Senha incorreta. A conta não será excluída.");
        }

    }//GEN-LAST:event_btnExcluirContaActionPerformed

    private void btnTrocarEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTrocarEmailActionPerformed
        // TODO add your handling code here:
        String novoEmail = JOptionPane.showInputDialog(null, "Digite o novo e-mail:");

        if (novoEmail == null || novoEmail.isBlank()) {
            JOptionPane.showMessageDialog(null, "E-mail inválido.");
            return;
        }

        String token = TokenUtil.gerarToken();
        TokenUtil.salvarTokenNoBanco(novoEmail, token);

        String assunto = "Confirmação de troca de e-mail";
        String corpo = "Você solicitou a troca do seu e-mail no sistema Crewly.\n\n"
                + "Se foi você, use o token abaixo para confirmar.\n"
                + "Caso contrário, ignore esta mensagem.";

        try {
            EmailSender.enviarToken(novoEmail, token, assunto, corpo);
        } catch (MessagingException ex) {
            Logger.getLogger(TelaPerfil.class.getName()).log(Level.SEVERE, null, ex);
        }

        String tokenDigitado = JOptionPane.showInputDialog(null, "Digite o token enviado para " + novoEmail);

        if (tokenDigitado == null || tokenDigitado.isBlank()) {
            JOptionPane.showMessageDialog(null, "Token não inserido.");
            return;
        }

        if (TokenUtil.validarToken(novoEmail, tokenDigitado)) {
            try (Connection conn = Database.getConnection(); PreparedStatement stmt = conn.prepareStatement("UPDATE usuarios SET email = ? WHERE email = ?")) {

                stmt.setString(1, novoEmail);
                stmt.setString(2, usuario.getEmail()); // você precisa pegar o email atual do usuário logado
                int atualizado = stmt.executeUpdate();

                if (atualizado > 0) {
                    JOptionPane.showMessageDialog(null, "E-mail atualizado com sucesso!");
                    TokenUtil.removerToken(novoEmail);
                    // Aqui você pode atualizar o valor de emailAtualDoUsuario, se ele for uma variável acessível.
                } else {
                    JOptionPane.showMessageDialog(null, "Erro ao atualizar o e-mail.");
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erro de conexão com o banco.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Token inválido ou expirado.");
        }
    }//GEN-LAST:event_btnTrocarEmailActionPerformed

    private String solicitarNovaSenha() {
        String regex = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@#$%^&+=!]).{8,}$";
        while (true) {
            String novaSenha = JOptionPane.showInputDialog(this, "Digite a nova senha:");
            if (novaSenha == null || novaSenha.trim().isEmpty()) {
                return null;
            }

            if (!novaSenha.matches(regex)) {
                JOptionPane.showMessageDialog(this,
                        "A senha deve ter no mínimo 8 caracteres, com pelo menos:\n- 1 letra minúscula\n- 1 letra maiúscula\n- 1 número\n- 1 caractere especial (@#$%^&+=!)");
            } else {
                return novaSenha;
            }
        }
    }

    private void carregarCompetenciasDoUsuario(int idUsuario) {
        painelCompetencias.removeAll();
        painelCompetencias.setLayout(new javax.swing.BoxLayout(painelCompetencias, javax.swing.BoxLayout.Y_AXIS));

        List<Competencia> todas = sistema.buscarTodasCompetencias();
        List<Integer> competenciasDoUsuario = sistema.buscarCompetenciasPorUsuario(idUsuario);

        for (Competencia c : todas) {
            JCheckBox checkBox = new JCheckBox(c.getNome());
            checkBox.putClientProperty("id_competencia", c.getId());
            checkBox.setSelected(competenciasDoUsuario.contains(c.getId()));
            painelCompetencias.add(checkBox);
            checkboxesCompetencias.add(checkBox);
        }

        painelCompetencias.setPreferredSize(new Dimension(300, 200));
        painelCompetencias.setBackground(Color.WHITE);
        painelCompetencias.setVisible(true); // Garante que o painel esteja visível

        painelConteudo.add(painelCompetencias, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 650, 300, 200));

        painelCompetencias.revalidate();
        painelCompetencias.repaint();

        painelConteudo.revalidate();
        painelConteudo.repaint();
    }

    private void salvarCompetenciasDoUsuario(int idUsuario) {
        try (Connection conn = Database.getConnection()) {
            // Apagar antigas
            PreparedStatement del = conn.prepareStatement(
                    "DELETE FROM usuario_competencia WHERE id_usuario = ?"
            );
            del.setInt(1, idUsuario);
            del.executeUpdate();

            // Inserir novas marcadas
            PreparedStatement ins = conn.prepareStatement(
                    "INSERT INTO usuario_competencia (id_usuario, id_competencia) VALUES (?, ?)"
            );
            for (JCheckBox cb : checkboxesCompetencias) {
                Object idObj = cb.getClientProperty("id_competencia");
                if (cb.isSelected() && idObj != null) {
                    int idCompetencia = (int) idObj;
                    ins.setInt(1, idUsuario);
                    ins.setInt(2, idCompetencia);
                    ins.addBatch();
                }
            }

            ins.executeBatch();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditarNome;
    private javax.swing.JButton btnExcluirConta;
    private javax.swing.JButton btnRedefinirSenha;
    private javax.swing.JButton btnTrocarEmail;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCargo;
    private javax.swing.JPanel painelConteudo;
    private javax.swing.JLabel txtEmail;
    private javax.swing.JLabel txtNome;
    // End of variables declaration//GEN-END:variables
}
